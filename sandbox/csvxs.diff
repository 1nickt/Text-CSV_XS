diff --git a/CSV_XS.xs b/CSV_XS.xs
index 886077e..c3b3631 100644
--- a/CSV_XS.xs
+++ b/CSV_XS.xs
@@ -34,7 +34,7 @@
 #define CSV_XS_TYPE_NV	2
 
 /* Keep in sync with .pm! */
-#define CACHE_SIZE			36
+#define CACHE_SIZE			40
 
 #define CACHE_ID_quote_char		0
 #define CACHE_ID_escape_char		1
@@ -59,6 +59,7 @@
 #define CACHE_ID__has_ahead		30
 #define CACHE_ID_quote_null		31
 #define CACHE_ID_quote_binary		32
+#define CACHE_ID__can_tell		33
 
 #define CSV_FLAGS_QUO	0x0001
 #define CSV_FLAGS_BIN	0x0002
@@ -113,6 +114,8 @@ typedef struct {
     byte	quote_binary;
     byte	first_safe_char;
 
+    byte	can_tell;
+
     long	is_bound;
 
     byte *	cache;
@@ -195,7 +198,7 @@ xs_error_t xs_errors[] =  {
     };
 
 static int  io_handle_loaded = 0;
-static SV  *m_getline, *m_print, *m_tell, *m_seek, *m_read;
+static SV  *m_getline, *m_print, *m_tell, *m_seek, *m_read, *m_can;
 
 #define require_IO_Handle \
     unless (io_handle_loaded) {\
@@ -431,6 +434,7 @@ static void cx_SetupCsv (pTHX_ csv_t *csv, HV *self, SV *pself)
 	csv->verbatim			= csv->cache[CACHE_ID_verbatim		];
 	csv->has_ahead			= csv->cache[CACHE_ID__has_ahead	];
 	csv->eol_is_cr			= csv->cache[CACHE_ID_eol_is_cr		];
+	csv->can_tell			= csv->cache[CACHE_ID__can_tell		];
 	csv->eol_len			= csv->cache[CACHE_ID_eol_len		];
 	if (csv->eol_len < 8)
 	    csv->eol = &csv->cache[CACHE_ID_eol];
@@ -503,7 +507,8 @@ static void cx_SetupCsv (pTHX_ csv_t *csv, HV *self, SV *pself)
 	    csv->types_len = len;
 	    }
 
-	csv->is_bound  = 0;
+	csv->can_tell = 0;
+	csv->is_bound = 0;
 	if ((svp = hv_fetchs (self, "_is_bound", FALSE)) && *svp && SvOK(*svp))
 	    csv->is_bound = SvIV(*svp);
 
@@ -551,6 +556,7 @@ static void cx_SetupCsv (pTHX_ csv_t *csv, HV *self, SV *pself)
 	if (csv->eol_len > 0 && csv->eol_len < 8 && csv->eol)
 	    memcpy ((char *)&csv->cache[CACHE_ID_eol], csv->eol, csv->eol_len);
 	csv->cache[CACHE_ID_has_types]			= csv->types ? 1 : 0;
+	csv->cache[CACHE_ID__can_tell]			= csv->can_tell;
 	csv->cache[CACHE_ID__has_ahead]			= csv->has_ahead = 0;
 	csv->cache[CACHE_ID__is_bound    ] = (csv->is_bound & 0xFF000000) >> 24;
 	csv->cache[CACHE_ID__is_bound + 1] = (csv->is_bound & 0x00FF0000) >> 16;
@@ -1377,15 +1383,32 @@ static int cx_c_xsParse (pTHX_ csv_t csv, HV *hv, AV *av, AV *avf, SV *src, bool
 	csv.tmp = NULL;
 
 #if (PERL_BCDVERSION >= 0x5014000)
-	PUSHMARK (sp);
-	EXTEND (sp, 1);
-	PUSHs (src);
-	PUTBACK;
-	result = call_sv (m_tell, G_SCALAR | G_METHOD);
-	/* result = Perl_pp_tell (aTHX_); ? */
-	SPAGAIN;
-	pos = result ? POPs : NULL;
-	PUTBACK;
+	if (csv.can_tell == 0) {
+	    fprintf(stderr,"# Telling -- %x --\n", SvROK (src));
+	    /* IO *io = sv_2io (src); */
+	    /* sv_dump (src); */
+	    PUSHMARK (sp);
+	    EXTEND (sp, 1);
+	    PUSHs (src);
+	    PUSHs (m_tell);
+	    PUTBACK;
+	    result = call_sv (m_can, G_SCALAR | G_METHOD);
+	    SPAGAIN;
+	    csv.can_tell = result && SvTRUE (POPs) ? 1 : 2;
+	    fprintf(stderr,"# Telling: %d\n", csv.can_tell);
+	    PUTBACK;
+	    }
+	if (csv.can_tell == 1) {
+	    PUSHMARK (sp);
+	    EXTEND (sp, 1);
+	    PUSHs (src);
+	    PUTBACK;
+	    result = call_sv (m_tell, G_SCALAR | G_METHOD);
+	    /* result = Perl_pp_tell (aTHX_); ? */
+	    SPAGAIN;
+	    pos = result ? POPs : NULL;
+	    PUTBACK;
+	    }
 #endif
 
 	if ((ahead = csv.has_ahead)) {
@@ -1444,19 +1467,22 @@ static int cx_c_xsParse (pTHX_ csv_t csv, HV *hv, AV *av, AV *avf, SV *src, bool
 	    SV *now = NULL;
 	    int can = 0, r;
 
-	    /* now = $io->tell */
-	    dSP;
-	    PUSHMARK (sp);
-	    EXTEND (sp, 1);
-	    PUSHs (src);
-	    PUTBACK;
-	    r = call_sv (m_tell, G_SCALAR | G_METHOD);
-	    SPAGAIN;
-	    now = r ? POPs : NULL;
-	    PUTBACK;
+	    if (csv.can_tell = 1) {
+		/* now = $io->tell */
+		dSP;
+		PUSHMARK (sp);
+		EXTEND (sp, 1);
+		PUSHs (src);
+		PUTBACK;
+		r = call_sv (m_tell, G_SCALAR | G_METHOD);
+		SPAGAIN;
+		now = r ? POPs : NULL;
+		PUTBACK;
+		}
 
 	    if (now && SvIV (now) > SvIV (pos)) {
 		/* $io->seek (pos, 0) */
+		dSP;
 		PUSHMARK (sp);
 		EXTEND (sp, 3);
 		PUSHs (src);
@@ -1624,6 +1650,7 @@ BOOT:
     m_tell    = newSVpvs ("tell");
     m_seek    = newSVpvs ("seek");
     m_read    = newSVpvs ("read");
+    m_can     = newSVpvs ("can");
 
 void
 SetDiag (self, xse, ...)
